2020/5/28 ——简单
	1. 21.合并列表
将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

思路：
暴力法：
	1. 链表L1为空/链表L2为空，直接返回空链
	2. 链表不为空，判断L1和L2的头节点哪一个小，以小的为开始递归交换
代码：
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == NULL) {
            return l2;
        }
        else if (l2 == NULL)
        {
            return l1;
        }
        if (l1->val < l2->val)
        {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else
        {
            l2->next = mergeTwoLists(l2->next, l1);
            return l2;
        }
    }
};


237. 删除链表中的节点
请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。
现有一个链表 -- head = [4,5,1,9]，它可以表示为:


示例 1:
输入: head = [4,5,1,9], node = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.

代码：
class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val = node->next->val;
        node->next = node->next->next;  
    }
};

83. 删除排序链表中的重复元素
给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。
示例 1:
输入: 1->1->2
输出: 1->2
分析：递归解决，
①列表只有一个元素的时候，返回head
②递归调用delet, 如果头节点指向的值与下一个指针的相同，则将头指针指向下一个节点
代码：
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head== NULL || head ->next ==NULL){
            return head;
        }
        head->next = deleteDuplicates(head->next);
        if(head->val == head->next->val){
            head = head->next;
        }
        return head;
    }
};

